[{
  "history_id" : "hd8a6d12dju",
  "history_input" : "import cv2\nimport gc\nfrom geotiff import GeoTiff\nimport numpy as np\nfrom os import path,makedirs\nimport matplotlib.pyplot as plt\nimport planetary_computer\nfrom pystac_client import Client\nfrom scipy.io import savemat\nimport wget\n\ndef getdem (lat1=31.,lat2=51.,lon1=-126.,lon2=-102.,dir = 'dem', matfile='dem.mat'):\n    makedirs(dir,exist_ok=True)\n    client = Client.open(\"https://planetarycomputer.microsoft.com/api/stac/v1\",\n                          ignore_conformance=True)\n    cosd = lambda x: np.cos(np.radians(x))\n    \n    sz = 1200\n    dsm = []\n    for lon in np.arange(lon1+0.5,lon2):\n        col = []\n        for lat in np.arange(lat1+0.5,lat2):\n            file = path.join(dir, f'Copernicus_DSM_COG_30_N{int(lat)}_00_W{int(1-lon)}_00_DEM.tif')            \n            if not path.isfile(file):\n                search = client.search(collections=[\"cop-dem-glo-90\"],\n                                        intersects={\"type\": \"Point\", \"coordinates\": [lon, lat]})\n                items = list(search.get_items())        \n                if len(items)>0:            \n                    print(f\"Returned {len(items)} items\")\n                    signed_asset = planetary_computer.sign(items[0].assets[\"data\"])\n                    fname = wget.download(signed_asset.href, dir)\n                else:\n                    print(\"Not found \"+file)\n            if path.isfile(file):\n                file = GeoTiff(file)\n                arr = np.array(file.read())[-1::-1]\n                print([file.get_coords(0,0),file.get_coords(arr.shape[0]-1,arr.shape[1]-1)])\n                if (arr.shape[1] != sz) or (arr.shape[0] != sz):\n                   arr =  cv2.resize(arr,(sz,sz))\n                # plt.imshow(arr)\n            else:\n                arr = np.zeros((sz,sz))\n            col.append(arr)\n        dsm.append (np.concatenate(col,axis=0))\n    dsm = np.concatenate(dsm,axis=1)\n    del col,arr\n    gc.collect()\n    \n    rm = 2.\n    r = 5\n    sh = (r-1)//2\n    av = dsm.reshape(dsm.shape[0]//r,r,-1,r).mean(-1).mean(1)\n    x = dsm[1:]-dsm[:-1]\n    south = x.copy()\n    cv2.GaussianBlur(x[:,1:]+x[:,:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, south, r)\n    south = south[sh::r,sh::r]\n    \n    x = np.abs(x)\n    x = 0.5*(x[:,1:]+x[:,:-1])\n    y = dsm[:,1:]-dsm[:,:-1]\n    del dsm\n    gc.collect()\n    y /= cosd(np.arange(lat1,lat2,1/sz))[:,None]\n    east = y.copy()\n    cv2.GaussianBlur(y[1:]+y[:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, east, r)\n    east = east[sh::r,sh::r]\n    y = np.abs(y)\n    y = 0.5*(y[1:]+y[:-1])    \n    aspect = np.hypot(x,y)\n    del x,y\n    gc.collect()\n    \n    avs = aspect.copy()\n    cv2.GaussianBlur(aspect, (2*int(rm*r)+1, 2*int(rm*r)+1), r, avs, r)\n    aspect = avs[sh::r,sh::r]\n    del avs\n    \n    lat = np.arange(lat1+(sh+0.5)/sz,lat2-sh/sz,r/sz)\n    lon = np.arange(lon1+(sh+0.5)/sz,lon2-sh/sz,r/sz)\n    \n    out = {'lat': lat, 'lon': lon, 'aspect': aspect, 'elev': av, 'south': south, 'east': east}\n    print (f'Saving DEM to {matfile}')\n    savemat(matfile, out, do_compression=True)\n    return out\n\nif __name__ == '__main__':\n    getdem()\n    ",
  "history_output" : "Not found dem/Copernicus_DSM_COG_30_N31_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N32_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N33_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N34_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N35_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N36_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N37_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N38_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N39_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N40_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N41_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N42_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N43_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N44_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N45_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N46_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N47_00_W126_00_DEM.tif\nReturned 1 items\nTraceback (most recent call last):\n  File \"data_dem.py\", line 87, in <module>\n    getdem()\n  File \"data_dem.py\", line 36, in getdem\n    arr = np.array(file.read())[-1::-1]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 589, in __array__\n    a = self[...]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 807, in __getitem__\n    result = self.get_basic_selection(pure_selection, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 933, in get_basic_selection\n    return self._get_basic_selection_nd(selection=selection, out=out,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 976, in _get_basic_selection_nd\n    return self._get_selection(indexer=indexer, out=out, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1267, in _get_selection\n    self._chunk_getitem(chunk_coords, chunk_selection, out, out_selection,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1966, in _chunk_getitem\n    cdata = self.chunk_store[ckey]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/storage.py\", line 724, in __getitem__\n    return self._mutable_mapping[key]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 9985, in __getitem__\n    return self._getitem(key)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 10593, in _getitem\n    chunk = keyframe.decode(chunk_bytes, chunkindex, **decodeargs)[0]  # type: ignore\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 6817, in decode_raise_predictor\n    raise ValueError(f'{exc}')\nValueError: <PREDICTOR.FLOATINGPOINT: 3> requires the 'imagecodecs' package\n",
  "history_begin_time" : 1668624373967,
  "history_end_time" : 1668624383869,
  "history_notes" : null,
  "history_process" : "d25i0q",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "dsztXfzhCjIs",
  "history_input" : "import cv2\nimport gc\nfrom geotiff import GeoTiff\nimport numpy as np\nfrom os import path,makedirs\nimport matplotlib.pyplot as plt\nimport planetary_computer\nfrom pystac_client import Client\nfrom scipy.io import savemat\nimport wget\n\ndef getdem (lat1=31.,lat2=51.,lon1=-126.,lon2=-102.,dir = 'dem', matfile='dem.mat'):\n    makedirs(dir,exist_ok=True)\n    client = Client.open(\"https://planetarycomputer.microsoft.com/api/stac/v1\",\n                          ignore_conformance=True)\n    cosd = lambda x: np.cos(np.radians(x))\n    \n    sz = 1200\n    dsm = []\n    for lon in np.arange(lon1+0.5,lon2):\n        col = []\n        for lat in np.arange(lat1+0.5,lat2):\n            file = path.join(dir, f'Copernicus_DSM_COG_30_N{int(lat)}_00_W{int(1-lon)}_00_DEM.tif')            \n            if not path.isfile(file):\n                search = client.search(collections=[\"cop-dem-glo-90\"],\n                                        intersects={\"type\": \"Point\", \"coordinates\": [lon, lat]})\n                items = list(search.get_items())        \n                if len(items)>0:            \n                    print(f\"Returned {len(items)} items\")\n                    signed_asset = planetary_computer.sign(items[0].assets[\"data\"])\n                    fname = wget.download(signed_asset.href, dir)\n                else:\n                    print(\"Not found \"+file)\n            if path.isfile(file):\n                file = GeoTiff(file)\n                arr = np.array(file.read())[-1::-1]\n                print([file.get_coords(0,0),file.get_coords(arr.shape[0]-1,arr.shape[1]-1)])\n                if (arr.shape[1] != sz) or (arr.shape[0] != sz):\n                   arr =  cv2.resize(arr,(sz,sz))\n                # plt.imshow(arr)\n            else:\n                arr = np.zeros((sz,sz))\n            col.append(arr)\n        dsm.append (np.concatenate(col,axis=0))\n    dsm = np.concatenate(dsm,axis=1)\n    del col,arr\n    gc.collect()\n    \n    rm = 2.\n    r = 5\n    sh = (r-1)//2\n    av = dsm.reshape(dsm.shape[0]//r,r,-1,r).mean(-1).mean(1)\n    x = dsm[1:]-dsm[:-1]\n    south = x.copy()\n    cv2.GaussianBlur(x[:,1:]+x[:,:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, south, r)\n    south = south[sh::r,sh::r]\n    \n    x = np.abs(x)\n    x = 0.5*(x[:,1:]+x[:,:-1])\n    y = dsm[:,1:]-dsm[:,:-1]\n    del dsm\n    gc.collect()\n    y /= cosd(np.arange(lat1,lat2,1/sz))[:,None]\n    east = y.copy()\n    cv2.GaussianBlur(y[1:]+y[:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, east, r)\n    east = east[sh::r,sh::r]\n    y = np.abs(y)\n    y = 0.5*(y[1:]+y[:-1])    \n    aspect = np.hypot(x,y)\n    del x,y\n    gc.collect()\n    \n    avs = aspect.copy()\n    cv2.GaussianBlur(aspect, (2*int(rm*r)+1, 2*int(rm*r)+1), r, avs, r)\n    aspect = avs[sh::r,sh::r]\n    del avs\n    \n    lat = np.arange(lat1+(sh+0.5)/sz,lat2-sh/sz,r/sz)\n    lon = np.arange(lon1+(sh+0.5)/sz,lon2-sh/sz,r/sz)\n    \n    out = {'lat': lat, 'lon': lon, 'aspect': aspect, 'elev': av, 'south': south, 'east': east}\n    print (f'Saving DEM to {matfile}')\n    savemat(matfile, out, do_compression=True)\n    return out\n\nif __name__ == '__main__':\n    getdem()\n    ",
  "history_output" : "Not found dem/Copernicus_DSM_COG_30_N31_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N32_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N33_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N34_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N35_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N36_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N37_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N38_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N39_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N40_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N41_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N42_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N43_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N44_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N45_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N46_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N47_00_W126_00_DEM.tif\nReturned 1 items\nTraceback (most recent call last):\n  File \"data_dem.py\", line 87, in <module>\n    getdem()\n  File \"data_dem.py\", line 36, in getdem\n    arr = np.array(file.read())[-1::-1]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 589, in __array__\n    a = self[...]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 807, in __getitem__\n    result = self.get_basic_selection(pure_selection, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 933, in get_basic_selection\n    return self._get_basic_selection_nd(selection=selection, out=out,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 976, in _get_basic_selection_nd\n    return self._get_selection(indexer=indexer, out=out, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1267, in _get_selection\n    self._chunk_getitem(chunk_coords, chunk_selection, out, out_selection,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1966, in _chunk_getitem\n    cdata = self.chunk_store[ckey]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/storage.py\", line 724, in __getitem__\n    return self._mutable_mapping[key]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 9985, in __getitem__\n    return self._getitem(key)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 10593, in _getitem\n    chunk = keyframe.decode(chunk_bytes, chunkindex, **decodeargs)[0]  # type: ignore\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 6817, in decode_raise_predictor\n    raise ValueError(f'{exc}')\nValueError: <PREDICTOR.FLOATINGPOINT: 3> requires the 'imagecodecs' package\n",
  "history_begin_time" : 1668524399619,
  "history_end_time" : 1668524437329,
  "history_notes" : null,
  "history_process" : "d25i0q",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Ml9FA1NoBUIU",
  "history_input" : "import cv2\nimport gc\nfrom geotiff import GeoTiff\nimport numpy as np\nfrom os import path,makedirs\nimport matplotlib.pyplot as plt\nimport planetary_computer\nfrom pystac_client import Client\nfrom scipy.io import savemat\nimport wget\n\ndef getdem (lat1=31.,lat2=51.,lon1=-126.,lon2=-102.,dir = 'dem', matfile='dem.mat'):\n    makedirs(dir,exist_ok=True)\n    client = Client.open(\"https://planetarycomputer.microsoft.com/api/stac/v1\",\n                          ignore_conformance=True)\n    cosd = lambda x: np.cos(np.radians(x))\n    \n    sz = 1200\n    dsm = []\n    for lon in np.arange(lon1+0.5,lon2):\n        col = []\n        for lat in np.arange(lat1+0.5,lat2):\n            file = path.join(dir, f'Copernicus_DSM_COG_30_N{int(lat)}_00_W{int(1-lon)}_00_DEM.tif')            \n            if not path.isfile(file):\n                search = client.search(collections=[\"cop-dem-glo-90\"],\n                                        intersects={\"type\": \"Point\", \"coordinates\": [lon, lat]})\n                items = list(search.get_items())        \n                if len(items)>0:            \n                    print(f\"Returned {len(items)} items\")\n                    signed_asset = planetary_computer.sign(items[0].assets[\"data\"])\n                    fname = wget.download(signed_asset.href, dir)\n                else:\n                    print(\"Not found \"+file)\n            if path.isfile(file):\n                file = GeoTiff(file)\n                arr = np.array(file.read())[-1::-1]\n                print([file.get_coords(0,0),file.get_coords(arr.shape[0]-1,arr.shape[1]-1)])\n                if (arr.shape[1] != sz) or (arr.shape[0] != sz):\n                   arr =  cv2.resize(arr,(sz,sz))\n                # plt.imshow(arr)\n            else:\n                arr = np.zeros((sz,sz))\n            col.append(arr)\n        dsm.append (np.concatenate(col,axis=0))\n    dsm = np.concatenate(dsm,axis=1)\n    del col,arr\n    gc.collect()\n    \n    rm = 2.\n    r = 5\n    sh = (r-1)//2\n    av = dsm.reshape(dsm.shape[0]//r,r,-1,r).mean(-1).mean(1)\n    x = dsm[1:]-dsm[:-1]\n    south = x.copy()\n    cv2.GaussianBlur(x[:,1:]+x[:,:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, south, r)\n    south = south[sh::r,sh::r]\n    \n    x = np.abs(x)\n    x = 0.5*(x[:,1:]+x[:,:-1])\n    y = dsm[:,1:]-dsm[:,:-1]\n    del dsm\n    gc.collect()\n    y /= cosd(np.arange(lat1,lat2,1/sz))[:,None]\n    east = y.copy()\n    cv2.GaussianBlur(y[1:]+y[:-1], (2*int(rm*r)+1, 2*int(rm*r)+1), r, east, r)\n    east = east[sh::r,sh::r]\n    y = np.abs(y)\n    y = 0.5*(y[1:]+y[:-1])    \n    aspect = np.hypot(x,y)\n    del x,y\n    gc.collect()\n    \n    avs = aspect.copy()\n    cv2.GaussianBlur(aspect, (2*int(rm*r)+1, 2*int(rm*r)+1), r, avs, r)\n    aspect = avs[sh::r,sh::r]\n    del avs\n    \n    lat = np.arange(lat1+(sh+0.5)/sz,lat2-sh/sz,r/sz)\n    lon = np.arange(lon1+(sh+0.5)/sz,lon2-sh/sz,r/sz)\n    \n    out = {'lat': lat, 'lon': lon, 'aspect': aspect, 'elev': av, 'south': south, 'east': east}\n    print (f'Saving DEM to {matfile}')\n    savemat(matfile, out, do_compression=True)\n    return out\n\nif __name__ == '__main__':\n    getdem()\n    ",
  "history_output" : "Not found dem/Copernicus_DSM_COG_30_N31_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N32_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N33_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N34_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N35_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N36_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N37_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N38_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N39_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N40_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N41_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N42_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N43_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N44_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N45_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N46_00_W126_00_DEM.tif\nNot found dem/Copernicus_DSM_COG_30_N47_00_W126_00_DEM.tif\nReturned 1 items\nTraceback (most recent call last):\n  File \"data_dem.py\", line 87, in <module>\n    getdem()\n  File \"data_dem.py\", line 36, in getdem\n    arr = np.array(file.read())[-1::-1]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 589, in __array__\n    a = self[...]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 807, in __getitem__\n    result = self.get_basic_selection(pure_selection, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 933, in get_basic_selection\n    return self._get_basic_selection_nd(selection=selection, out=out,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 976, in _get_basic_selection_nd\n    return self._get_selection(indexer=indexer, out=out, fields=fields)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1267, in _get_selection\n    self._chunk_getitem(chunk_coords, chunk_selection, out, out_selection,\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/core.py\", line 1966, in _chunk_getitem\n    cdata = self.chunk_store[ckey]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/zarr/storage.py\", line 724, in __getitem__\n    return self._mutable_mapping[key]\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 9985, in __getitem__\n    return self._getitem(key)\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 10593, in _getitem\n    chunk = keyframe.decode(chunk_bytes, chunkindex, **decodeargs)[0]  # type: ignore\n  File \"/Users/uhhmed/env_snowcast/lib/python3.8/site-packages/tifffile/tifffile.py\", line 6817, in decode_raise_predictor\n    raise ValueError(f'{exc}')\nValueError: <PREDICTOR.FLOATINGPOINT: 3> requires the 'imagecodecs' package\n",
  "history_begin_time" : 1667951394638,
  "history_end_time" : 1667951403073,
  "history_notes" : null,
  "history_process" : "d25i0q",
  "host_id" : null,
  "indicator" : "Failed"
},]
