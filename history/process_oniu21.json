[{
  "history_id" : "e89dvelzdpj",
  "history_input" : "from os import path\nimport torch\nimport models_init\n\ndef loadmodels(loadstr, inputs, modelsdir, arglist, print=print, modelslist=None, totalbest=[100.]):\n    better = modelslist is not None\n    if not better:\n        modelslist = {}    \n    for fold in range(1,100):\n        fname = path.join(modelsdir, loadstr+'_'+str(fold-1)+'.pt')\n        # print(fname)\n        if path.isfile(fname):\n            if fold > len(totalbest):\n                totalbest = totalbest + [100.]*(fold - len(totalbest))\n            bw = torch.load(fname, map_location='cpu')\n            kw = {key: bw[key] for key in bw if not isinstance(bw[key], torch.Tensor)}\n            if better and 'best' in kw and kw['best']>totalbest[fold-1]:\n                if print is not None:\n                    print('skip')\n                continue\n            if print is not None:\n                print(kw)\n            # fname = path.join('models', loadstr+'_f'+str(fold-1)+'.pt')\n            # if path.isfile(fname):\n            #     bw = torch.load(fname, map_location='cpu')\n            wg = {key: bw[key].to(models.calcdevice) for key in bw if key not in kw}        \n            if 'best' in kw:\n                totalbest[fold-1] = kw.pop('best')\n            mode = list(inputs.keys())[0]\n            if 'nets.0.dist.kf.rm' in wg:\n                m = models.Model3(None, inputs[mode]['xinput'].shape[-1], inputs[mode]['xval'].shape[-1], **kw)\n                # for mm in m.nets:\n                #     mm.net[0].frozen = True\n            else:\n                m = models.Model(inputs[mode]['xinput'].shape[-1], inputs[mode]['xval'].shape[-1], **kw)\n                # m.net[0].frozen = True\n            # printshape(wg)\n            # printshape(m.state_dict())\n            m.load_state_dict(wg)\n            m.to(device=models.calcdevice).eval()            \n            # print(m.importance())\n            modelslist[fold-1] = m\n    if print is not None:\n        imp = [modelslist[i].importance(arglist) for i in modelslist]\n        print (imp)\n        print ({key: [i[key] for i in imp] for key in imp[0]})\n    return modelslist",
  "history_output" : "",
  "history_begin_time" : 1668624364914,
  "history_end_time" : 1668624368934,
  "history_notes" : null,
  "history_process" : "oniu21",
  "host_id" : "100001",
  "indicator" : "Done"
},]
