[{
  "history_id" : "tkf692nwhgb",
  "history_input" : "import numpy as np\nimport torch\nfrom models_init import calcdevice\n\nvalid_bs = 8\n\ndef apply(m, inputs, sel, device=calcdevice, autoloss=False, lab='', lossfun=None, selecty=None, calcsd=False):     \n    x = {key: inputs[key][sel].detach() for key in inputs if key[0] != 'i'}\n    x['xid'] = torch.zeros_like(x['xlo'])\n    x['yid'] = torch.ones_like (x['ylo']) if 'ylo' in x else x['xid']\n    okx = torch.isfinite(x['xval'][..., 0]).any(0)\n    if m.training:\n        oky = torch.isfinite(x['yval'][..., 0]).any(0)        \n        x = {key: x[key][:,okx if key[0]=='x' else oky].to(device).detach() for key in x}\n        if autoloss:\n            if selecty is None:\n                selecty = inputs['isstation'].to(device)\n            xx = {'x'+key: torch.cat((x['y'+key][:,selecty[oky]],x['x'+key]),1).detach() for key in ['val','lo','la','input','id','emb'] if 'x'+key in x}\n            xx['yid'] = xx['xid']\n            xx['target'] = xx['xval'][...,:1].clone()\n            res = m (xx)[0][..., :1]\n            sely = ~selecty[oky.to(device)]; calcyx = (sely.sum()>0).item()\n            if calcyx:\n                yx = {key: xx[key] for key in ['xval','xlo','xla','xinput','xid','xemb'] if key in xx}\n                yx.update({key: x[key][:,sely].detach() for key in x if (key not in yx) and (key[0] != 'x')})\n                eres = m (yx)[0][..., :1]\n            if lossfun is not None:\n                loss,cnt = m.loss(xx, res, lab=lab, lossfun=lossfun)\n                if calcyx:\n                    eloss,ecnt = m.loss(yx, eres, lab=lab, lossfun=lossfun)\n                    return res, loss+eloss, cnt+ecnt\n                return res, loss, cnt\n    elif 'ylo' in x:        \n        if selecty is not None:\n            oky = torch.isfinite(x['yval'][..., 0]).any(0)\n            x = {key: x[key][:,okx if key[0]=='x' else oky&selecty.to(oky.device)].to(device).detach() for key in x}\n        else:\n            x = {key: (x[key][:,okx] if key[0]=='x' else x[key]).to(device).detach() for key in x}\n    else:\n        x = {key: x[key].to(device).detach() for key in x}\n    res,sd = m (x)\n    res = res[..., :1]\n    if sd is not None:\n        if calcsd:\n            return res,sd\n        else:\n            x['sd'] = sd[...,:1]\n    if lossfun is not None:\n        loss,cnt = m.loss(x, res, lab=lab, lossfun=lossfun)\n        return res, loss, cnt\n    return res\n\ndef applymodels (inputs, models, average=True, device=calcdevice, calcsd=False):\n    sh = inputs['ylo' if 'ylo' in inputs else 'xlo'].shape\n    arxdevice = inputs['xlo'].device\n    batches = int(np.ceil(sh[0]/valid_bs))\n    for iyear in models:\n        models[iyear].calcsd = 2 if calcsd else 0\n    with torch.no_grad():\n        if average is True:\n            average = torch.full([len(models)], 1./len(models), device=arxdevice)\n        if isinstance(average,torch.Tensor):\n            result = torch.zeros(sh, device=arxdevice)\n            # if calcsd:\n            #     std = torch.zeros(sh, device=arxdevice)\n            for i in range (batches):\n                sel = torch.arange(i*valid_bs, min((i+1)*valid_bs,sh[0]), device=arxdevice)\n                av = average[sel] if average.ndim>1 else average\n                # torch.cuda.empty_cache()\n                res = 0.\n                if calcsd:\n                    sd = 0.\n                    for i,iyear in enumerate(models.keys()):\n                        r,s = apply(models[iyear], inputs, sel, device=device, calcsd=calcsd)\n                        s = s[...,0].to(arxdevice)\n                        res = r[...,0].to(arxdevice)/s*av[...,i] + res\n                        sd = 1./s*av[...,i] + sd\n                    res = res*av.sum(-1)/sd\n                    # std[sel] = sd\n                else:\n                    for i,iyear in enumerate(models.keys()):\n                        res = apply(models[iyear], inputs, sel, device=device, calcsd=calcsd)[...,0].to(arxdevice)*av[...,i] + res\n                result[sel] = res\n        else:\n            result = torch.zeros(sh+(len(models),), device=arxdevice)\n            if calcsd:\n                std = torch.zeros(sh+(len(models),), device=arxdevice)\n                for i in range (batches):\n                    sel = torch.arange(i*valid_bs, min((i+1)*valid_bs,sh[0]), device=arxdevice)\n                    for i,iyear in enumerate(models):\n                        r,s = apply(models[iyear], inputs, sel, device=device, calcsd=calcsd)\n                        result[sel,...,i] = r[...,0].to(arxdevice)\n                        std[sel,...,i] = s[...,0].to(arxdevice)\n            else:\n                for i in range (batches):\n                    sel = torch.arange(i*valid_bs, min((i+1)*valid_bs,sh[0]), device=arxdevice)\n                    result[sel] = torch.cat([apply(models[iyear], inputs, sel, device=device, calcsd=calcsd).detach() for iyear in models], -1).to(arxdevice)\n    if calcsd and average is False:\n        return result,std\n    else:\n        return result",
  "history_output" : "",
  "history_begin_time" : 1668624357729,
  "history_end_time" : 1668624359883,
  "history_notes" : null,
  "history_process" : "t4juof",
  "host_id" : "100001",
  "indicator" : "Done"
},]
