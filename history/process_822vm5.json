[{
  "history_id" : "62rmykp1lj0",
  "history_input" : "import gc\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport numpy as np\nfrom os import path\nimport torch\n\n# from features_init import getdays\ngetdays = lambda keys: list(sorted([tday for tday in keys if tday[:4].isnumeric() and len(tday) == 10]))\n\nfrom features_constFeatures import getconstfeatures\n\ndef getinputs(workdir, rmode, modelsdir, withpred=True, nmonths=1, maindevice=torch.device('cpu'),\n              awsurl='https://drivendata-public-assets.s3.amazonaws.com/', print=print):\n    uregions = ['central rockies', 'sierras']\n    stmeta,grid,constfeatures = getconstfeatures(workdir, uregions, awsurl = awsurl, print=print)\n    \n    file = path.join(workdir,'submission_format.csv')\n    print(f\"Loading submission format from {file}\")\n    sub = pd.read_csv(file)\n    for tday in getdays(sub):\n        sub[tday] = np.full(sub.shape[0], np.nan)\n    sub = sub.rename({sub.columns[0]: 'cell_id'}, axis=1).set_index('cell_id')\n    gridswe_test  = sub.join (grid, on='cell_id')\n    stswe = {}; gridswe = {}\n        \n    if rmode == 'oper':\n        file = awsurl+'ground_measures_features.csv'\n        print(f\"Downloading {file}\")\n        stswe_test = pd.read_csv(file)\n        file = path.join(workdir,'ground_measures_features.csv')\n        stswe_test.to_csv(file)\n        # print(f\"Loading {file}\")\n        # stswe_test = pd.read_csv(file)\n    elif rmode == 'test':\n        file = path.join(workdir,'ground_measures_test_features.csv')\n        print(f\"Loading {file}\")\n        stswe_test = pd.read_csv(file)\n    else:\n        sttestfile = path.join(workdir,'ground_measures_test_features.csv')\n        sttrainfile = path.join(workdir,'ground_measures_train_features.csv')\n        gridtrainfile = path.join(workdir,'train_labels.csv')\n        print(f\"Loading {sttestfile} {sttrainfile} {gridtrainfile}\")\n        stswe_test = pd.read_csv(sttestfile)\n        stswe_train = pd.read_csv(sttrainfile)\n        stswe_train = stswe_train.rename({stswe_train.columns[0]: 'station_id'}, axis=1).set_index('station_id')\n        gridswe_train = pd.read_csv(gridtrainfile).set_index('cell_id')\n        \n        stswe_train = stswe_train.join (stmeta, on='station_id')\n        gridswe_train = gridswe_train.join (grid, on='cell_id')    \n        \n        stswe['train'] = stswe_train\n        gridswe['train'] = gridswe_train\n    stswe_test = stswe_test.rename({stswe_test.columns[0]: 'station_id'}, axis=1).set_index('station_id').join (stmeta, on='station_id')\n    \n    stswe['test'] = stswe_test\n    gridswe['test'] = gridswe_test\n    \n    days = {mode: features.getdays(stswe[mode]) for mode in stswe}\n    dates = {mode: [datetime.strptime(tday,'%Y-%m-%d') for tday in days[mode]] for mode in stswe}\n    \n    stswe, gridswe, nstations  = features.getembindex (stswe, gridswe, days, modelsdir=modelsdir, print=print)\n    stswe, gridswe, rsfeatures = features.getmodisfeatures (workdir, stswe, gridswe, dates, rmode, print=print)\n    \n    if rmode != 'oper':\n        file = path.join(workdir,'labels_2020_2021.csv')\n        print(f\"Loading {file}\")\n        trg = pd.read_csv(file).set_index('cell_id')\n        for key in trg:\n            if key in gridswe['test']:\n                gridswe['test'].pop(key)\n        gridswe['test'] = gridswe['test'].join (trg, on='cell_id')\n        if rmode[:8] == 'finalize':\n            for d in [stswe, gridswe]:\n                for key in d['test']:\n                    if key not in d['train']:\n                        d['train'][key] = d['test'][key]\n                d.pop('test')\n            days['train'] = days['train']+days.pop('test')\n            dates['train'] = dates['train']+dates.pop('test')\n        if rmode[:5] == 'train':\n            # days['train'] = days['train'][:-5]\n            # dates['train'] = dates['train'][:-5]\n            for d in [stswe, gridswe]:\n                for key in d['test']:\n                    if key not in d['train']:\n                        d['train'][key] = d['test'][key]\n            days['train'] = days['train']+days['test'][:-31]\n            dates['train'] = dates['train']+dates['test'][:-31]\n            days['test'] = days['test'][-31:]\n            dates['test'] = dates['test'][-31:]\n            print(f\"test: {days['test']}\")\n            print(f\"train: {days['train']}\")\n                \n    constfeatures = uregions + list(sorted(constfeatures)) + ['isemb']\n    rsfeatures = list(sorted(rsfeatures))\n    gc.collect()\n    inputs, arglist, days, dates = features.getdatadict(rmode, stswe, gridswe, constfeatures, rsfeatures, maindevice,\n                                   withpred=withpred, nmonths=nmonths, print=print)    \n    return inputs, arglist, uregions, stswe, gridswe, days, dates, nstations",
  "history_output" : "",
  "history_begin_time" : 1668624364340,
  "history_end_time" : 1668624364815,
  "history_notes" : null,
  "history_process" : "822vm5",
  "host_id" : "100001",
  "indicator" : "Done"
},]
